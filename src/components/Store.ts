import { useState, useEffect, useRef } from 'react'

// ============================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –¢–ò–ü–´
// ============================================

// –ë–∞–∑–æ–≤—ã–π —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç
type TState = Record<string, any>

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface ApiResponse<T = any> {
  success: boolean
  data: T | null
  error?: string
  message?: string
}

// –ë–∞–∑–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
interface StoreAction<T = any> {
  type: string
  data: T
}

// –¢–∏–ø –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
interface StoreListener {
  num: number
  type: string
  func: () => void
}

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Store
interface StoreConfig<T extends TState> {
  initialState: T
  apiBaseUrl?: string
  enableDevTools?: boolean
  enableLogging?: boolean
}

// ============================================
// –ö–û–ù–ö–†–ï–¢–ù–´–ï –¢–ò–ü–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
// ============================================

// –¢–∏–ø—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthData {
  userId: string
  fullName: string
  role: 'master' | 'technician' | 'plumber' | 'dispatcher' | 'subcontractor' | ''
  token: string
}

interface AuthResponse {
  id: string
  phone: string
  fullName: string
  role: string
  token: string
}

// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
interface AppState {
  auth: boolean
  login: AuthData
  route: string
  back: number
  message: string
  toast: any | null
}

// ============================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô STORE CLASS
// ============================================

class UniversalStore<T extends TState> {
  private state: T
  private listeners: StoreListener[] = []
  private config: StoreConfig<T>

  constructor(config: StoreConfig<T>) {
    this.config = config
    this.state = { ...config.initialState }
    
    if (config.enableDevTools && typeof window !== 'undefined') {
      this.setupDevTools()
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): T {
    return { ...this.state }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
  dispatch<TData>(action: StoreAction<TData>): StoreAction<TData> {
    const oldState = { ...this.state }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (this.state.hasOwnProperty(action.type)) {
      this.state = {
        ...this.state,
        [action.type]: action.data
      }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (this.config.enableLogging) {
      console.group(`üîÑ Store Action: ${action.type}`)
      console.log('Previous:', oldState[action.type])
      console.log('Action:', action)
      console.log('Next:', this.state[action.type])
      console.groupEnd()
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    this.notifyListeners(action.type)

    return action
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(listener: StoreListener): void {
    const existingIndex = this.listeners.findIndex(l => l.num === listener.num)
    
    if (existingIndex >= 0) {
      this.listeners[existingIndex] = listener
    } else {
      this.listeners.push(listener)
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
  unsubscribe(listenerId: number): void {
    this.listeners = this.listeners.filter(l => l.num !== listenerId)
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  private notifyListeners(actionType: string): void {
    this.listeners
      .filter(listener => listener.type === actionType)
      .forEach(listener => {
        try {
          listener.func()
        } catch (error) {
          console.error('Store listener error:', error)
        }
      })
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DevTools (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
  private setupDevTools(): void {
    if (typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__) {
      const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__
      // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Redux DevTools
      console.log('üõ† Redux DevTools available')
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  reset(): void {
    this.state = { ...this.config.initialState }
    this.listeners.forEach(listener => listener.func())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getStateSlice<K extends keyof T>(key: K): T[K] {
    return this.state[key]
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  batchUpdate(updates: Partial<T>): void {
    const oldState = { ...this.state }
    this.state = { ...this.state, ...updates }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    Object.keys(updates).forEach(key => {
      this.notifyListeners(key)
    })

    if (this.config.enableLogging) {
      console.group('üîÑ Batch Update')
      console.log('Updates:', updates)
      console.log('New State:', this.state)
      console.groupEnd()
    }
  }
}

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const initialAppState: AppState = {
  auth: false,
  login: { userId: "", fullName: "", role: "", token: "" },
  route: "",
  back: 0,
  message: '',
  toast: null
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Store
const store = new UniversalStore<AppState>({
  initialState: initialAppState,
  apiBaseUrl: "https://fhd.aostng.ru/dashboard/mi/",
  enableDevTools: process.env.NODE_ENV === 'development',
  enableLogging: process.env.NODE_ENV === 'development'
})

// ============================================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –•–£–ö–ò
// ============================================

// –ë–∞–∑–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Store
function useStore<T extends TState, TSelected>(
  selector: (state: T) => TSelected,
  subscriptionId: number,
  storeInstance: UniversalStore<T>
): TSelected {
  const [selectedState, setSelectedState] = useState<TSelected>(
    selector(storeInstance.getState())
  )
  const isMountedRef = useRef(true)

  useEffect(() => {
    isMountedRef.current = true
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setSelectedState(selector(storeInstance.getState()))

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
    const currentState = storeInstance.getState()
    const stateKeys = Object.keys(currentState)
    
    stateKeys.forEach(key => {
      storeInstance.subscribe({
        num: subscriptionId + key.length, // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        type: key,
        func: () => {
          if (isMountedRef.current) {
            const newState = selector(storeInstance.getState())
            setSelectedState(newState)
          }
        }
      })
    })

    return () => {
      isMountedRef.current = false
      stateKeys.forEach(key => {
        storeInstance.unsubscribe(subscriptionId + key.length)
      })
    }
  }, [selector, subscriptionId, storeInstance])

  return selectedState
}

// –•—É–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
function useStoreField<T extends TState, K extends keyof T>(
  fieldName: K,
  subscriptionId: number,
  storeInstance: UniversalStore<T>
): T[K] {
  const [fieldValue, setFieldValue] = useState<T[K]>(
    storeInstance.getStateSlice(fieldName)
  )
  const isMountedRef = useRef(true)

  useEffect(() => {
    isMountedRef.current = true
    
    setFieldValue(storeInstance.getStateSlice(fieldName))

    storeInstance.subscribe({
      num: subscriptionId,
      type: fieldName as string,
      func: () => {
        if (isMountedRef.current) {
          setFieldValue(storeInstance.getStateSlice(fieldName))
        }
      }
    })

    return () => {
      isMountedRef.current = false
      storeInstance.unsubscribe(subscriptionId)
    }
  }, [fieldName, subscriptionId, storeInstance])

  return fieldValue
}

// ============================================
// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –•–£–ö–ò –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ============================================

// –•—É–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function useAuth(): [AuthData, boolean, (authData: AuthData) => void, () => void] {
  const login = useStoreField('login', 1001, store)
  const auth = useStoreField('auth', 1002, store)

  const setAuth = (authData: AuthData) => {
    store.batchUpdate({
      login: authData,
      auth: true
    } as Partial<AppState>)
  }

  const logout = () => {
    store.batchUpdate({
      login: { userId: "", fullName: "", role: "", token: "" },
      auth: false
    } as Partial<AppState>)
  }

  return [login, auth, setAuth, logout]
}

// –•—É–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
function useMessage(): [string, (message: string) => void, () => void] {
  const message = useStoreField('message', 1003, store)

  const setMessage = (msg: string) => {
    store.dispatch({ type: 'message', data: msg })
  }

  const clearMessage = () => {
    store.dispatch({ type: 'message', data: '' })
  }

  return [message, setMessage, clearMessage]
}

// –•—É–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function useNavigation(): [string, number, (route: string) => void, () => void] {
  const route = useStoreField('route', 1004, store)
  const back = useStoreField('back', 1005, store)

  const setRoute = (newRoute: string) => {
    store.batchUpdate({
      route: newRoute,
      back: back + 1
    } as Partial<AppState>)
  }

  const goBack = () => {
    store.dispatch({ type: 'back', data: Math.max(0, back - 1) })
  }

  return [route, back, setRoute, goBack]
}

// ============================================
// API –°–ò–°–¢–ï–ú–ê
// ============================================

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
async function apiCall<T = any>(
  method: string, 
  params: any = {},
  options: {
    timeout?: number
    headers?: Record<string, string>
    baseUrl?: string
  } = {}
): Promise<ApiResponse<T>> {
  const {
    timeout = 10000,
    headers = { 'Content-Type': 'application/json' },
    baseUrl = store.getState().login?.token ? 
      "https://fhd.aostng.ru/dashboard/mi/" : 
      "https://fhd.aostng.ru/dashboard/mi/"
  } = options

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
  const token = store.getStateSlice('login').token
  if (token) {
    headers['Authorization'] = `Bearer ${token}`
  }

  try {
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), timeout)

    const response = await fetch(baseUrl + method, {
      method: 'POST',
      headers,
      body: JSON.stringify(params),
      signal: controller.signal
    })

    clearTimeout(timeoutId)

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('API Error:', error)
    return {
      success: false,
      data: null,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API —Ñ—É–Ω–∫—Ü–∏–∏
async function authUser(
  login: string, 
  password: string
): Promise<ApiResponse<AuthResponse>> {
  return await apiCall<AuthResponse>('p_authorization', { login, password })
}

async function getInvoices(token: string): Promise<ApiResponse<any[]>> {
  return await apiCall('p_get_invoices', { token })
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function execAndUpdate<T>(
  method: string, 
  params: any, 
  stateKey: keyof AppState
): Promise<void> {
  const result = await apiCall<T>(method, params)
  if (result.success && result.data) {
    store.dispatch({ type: stateKey as string, data: result.data })
  }
}

// ============================================
// –£–¢–ò–õ–ò–¢–´
// ============================================

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
function normalizePhone(phone: string | null | undefined): string {
  if (!phone) return ""
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
  const digits = phone.replace(/\D/g, '')
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  if (digits.length === 11 && digits.startsWith('8')) {
    return '+7' + digits.slice(1)
  } else if (digits.length === 11 && digits.startsWith('7')) {
    return '+' + digits
  } else if (digits.length === 10 && digits.startsWith('9')) {
    return '+7' + digits
  } else if (digits.length >= 11) {
    return '+' + digits
  }
  
  return digits
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
let uniqueId = 1000
function generateId(): number {
  return ++uniqueId
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
function formatDate(date: Date | string, format: 'short' | 'long' = 'short'): string {
  const d = new Date(date)
  
  if (format === 'short') {
    return d.toLocaleDateString()
  } else {
    return d.toLocaleString()
  }
}

// ============================================
// –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
// ============================================

// –°—Ç–∞—Ä—ã–µ —Ö—É–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function useSelector<T>(
  selector: (state: AppState) => T, 
  subscriptionId: number
): T {
  return useStore(selector, subscriptionId, store)
}

function useStoreFieldCompat<K extends keyof AppState>(
  fieldName: K, 
  subscriptionId: number
): AppState[K] {
  return useStoreField(fieldName, subscriptionId, store)
}

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async function getData(method: string, params: any): Promise<any> {
  const result = await apiCall(method, params)
  return { data: result.data }
}

async function exec(method: string, params: any, name: keyof AppState): Promise<void> {
  await execAndUpdate(method, params, name)
}

function Phone(phone: string): string {
  return normalizePhone(phone)
}

// ============================================
// –≠–ö–°–ü–û–†–¢–´
// ============================================

// –û—Å–Ω–æ–≤–Ω–æ–π Store (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
export const Store = {
  getState: () => store.getState(),
  dispatch: (action: StoreAction) => store.dispatch(action),
  subscribe: (listener: StoreListener) => store.subscribe(listener),
  unSubscribe: (id: number) => store.unsubscribe(id)
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ç–∏–ø—ã
export { 
  UniversalStore, 
  type TState,
  type StoreConfig, 
  type ApiResponse, 
  type StoreAction,
  type StoreListener
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏
export { useStore, useStoreField }

// –•—É–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export { useAuth, useMessage, useNavigation }

// –•—É–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { 
  useSelector, 
  useStoreField as useStoreFieldCompat
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
export { 
  apiCall, 
  authUser, 
  getInvoices, 
  execAndUpdate
}

// API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { getData, exec }

// –£—Ç–∏–ª–∏—Ç—ã
export { 
  normalizePhone, 
  generateId, 
  formatDate
}

// –£—Ç–∏–ª–∏—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { Phone }

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const URL = "https://fhd.aostng.ru/dashboard/mi/"

// –¢–∏–ø—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export type { 
  AppState, 
  AuthData, 
  AuthResponse,
  ApiResponse as ApiResponseType,
  StoreAction as StoreActionType,
  StoreListener as StoreListenerType
}

// –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É store (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export { store as storeInstance }